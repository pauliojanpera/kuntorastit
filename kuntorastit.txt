===== package.json =====

{
  "name": "kuntorastit",
  "version": "0.0.1",
  "description": "Kuntorastit",
  "private": false,
  "scripts": {
    "build": "tsc && tsc-alias && sed -i '/export {};$/d' public/dist/service-worker.mjs && mv public/dist/service-worker.mjs public/service-worker.js",
    "deploy": "./scripts/deploy.sh",
    "fetch": "./scripts/fetch_events.sh",
    "watch": "nodemon -e mts,json,html,png,sh --exec pnpm run build",
    "report": "./scripts/files.sh package.json tsconfig.json .github/workflows/static.yml scripts/ src public/manifest.json public/index.html > kuntorastit.txt"
  },
  "dependencies": {},
  "devDependencies": {
    "typescript": "^5.7.3",
    "tsc-alias": "^1.8.10",
    "nodemon": "^3.1.9"
  }
}

-----

===== tsconfig.json =====

{
  "compilerOptions": {
    "target": "esnext",                // Target ECMAScript next-generation output
    "outDir": "./public/dist",
    "module": "NodeNext",         
    "moduleResolution": "NodeNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "rootDirs": ["src"],  
  "include": ["src/**/*.mts", "src/**/*.ts"],
  "exclude": []                        // Exclude unnecessary files (e.g., test files, node_modules)
}

-----

===== .github/workflows/static.yml =====

# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  workflow_run:
    workflows: ["Update Event Data"]
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

-----

===== scripts/fetch_events.sh =====

#!/bin/bash
set -e  # Exit on error

# Define the target directory
TARGET_DIR="public/data"
mkdir -p "$TARGET_DIR"

# Fetch the JSON data
curl -sS "https://www.rastilippu.fi/api/events/search/?topLeftLat=70.190068&topLeftLon=19.640624&bottomRightLat=59.741636&bottomRightLon=31.769532&dateTimeRangeStart=2025-02-18T00:00:00Z&dateTimeRangeEnd=2025-04-15T00:00:00%2B03:00&size=9999" -o "$TARGET_DIR/events.json"

-----

===== scripts/files.sh =====

#!/bin/bash

# Default output is stdout (empty string means stdout in redirection), default pattern is all files
OUTPUT_FILE=""
FILE_PATTERNS=("*")  # Default to all files

# Usage message
usage() {
    echo "Usage: $0 [-o output_file] [-p pattern1 pattern2 ...] [files_or_directories...]"
    echo "  -o: Specify output file (default: stdout)"
    echo "  -p: File patterns to match (default: *)"
    echo "  files_or_directories: Files and/or directories to process (default: current directory)"
    exit 1
}

# Parse command-line options
while getopts "o:p:" opt; do
    case $opt in
        o) OUTPUT_FILE="$OPTARG" ;;
        p) IFS=' ' read -r -a FILE_PATTERNS <<< "$OPTARG" ;;
        ?) usage ;;
    esac
done
shift $((OPTIND - 1))

# If no arguments provided, default to current directory
if [ $# -eq 0 ]; then
    set -- "."
fi

# Build the find command with multiple patterns
FIND_ARGS=()
for pattern in "${FILE_PATTERNS[@]}"; do
    FIND_ARGS+=(-name "$pattern")
    if [ "$pattern" != "${FILE_PATTERNS[-1]}" ]; then
        FIND_ARGS+=(-o)
    fi
done

# Function to process a single path (file or directory)
process_path() {
    local path="$1"
    if [ -f "$path" ]; then
        # If it's a file, process it directly
        echo -e "===== $path =====\n"
        cat "$path"
        echo -e "\n-----\n"
    elif [ -d "$path" ]; then
        # If it's a directory, use find
        find "$path" -type f \( "${FIND_ARGS[@]}" \) -print0 | \
            xargs -0 -I {} /bin/bash -c 'echo -e "===== {} =====\n"; cat "{}"; echo -e "\n-----\n"'
    else
        echo "Warning: Skipping $path - not a file or directory" >&2
    fi
}

# Process all provided paths
if [ -z "$OUTPUT_FILE" ]; then
    # Output to stdout
    for path in "$@"; do
        process_path "$path"
    done
else
    # Output to file
    {
        for path in "$@"; do
            process_path "$path"
        done
    } > "$OUTPUT_FILE"
    echo "Combined files written to $OUTPUT_FILE"
fi
-----

===== scripts/deploy.sh =====

#!/bin/sh
msg="$1"
if [ -z "$msg" ]; then
  echo "Commit message required."
  exit 1
fi

pnpm run build && git add . && git commit -m "$msg" && git push -u origin main
-----

===== src/kuntorastit.mts =====

const DATA_URL = "./data/events.json";

type OrienteeringEvent = {
    uuid: string;
    startDateTime: number;
    endDateTime: number;
    name: string;
    organizerName: string;
    locationDescription: string;
    locationCoordinates: {
        lat: number;
        lon: number;
    }
}

type OrienteeringEventFilterSettings = {
    dateFilter?: 'past' | 'future';
    nameFilter?: string;
    organizerFilter?: string[];
};

function saveFilterSettings(filters: OrienteeringEventFilterSettings) {
    localStorage.setItem("orienteeringEventFilters", JSON.stringify(filters));
}

function loadFilterSettings(): OrienteeringEventFilterSettings {
    const storedFilters = localStorage.getItem("orienteeringEventFilters");
    return storedFilters ? JSON.parse(storedFilters) : {};
}

function restoreFilterUI() {
    const filters = loadFilterSettings();

    if (filters.dateFilter) {
        (document.getElementById("date-filter") as HTMLSelectElement).value = filters.dateFilter;
    }
    if (filters.nameFilter) {
        (document.getElementById("name-filter") as HTMLInputElement).value = filters.nameFilter;
    }
    if (filters.organizerFilter) {
        const select = document.getElementById("organizer-filter") as HTMLSelectElement;
        Array.from(select.options).forEach(option => {
            option.selected = filters.organizerFilter!.includes(option.value);
        });
    }
}

async function* filterSettings() {
    const filters: OrienteeringEventFilterSettings = loadFilterSettings();

    let resolve: (f: OrienteeringEventFilterSettings) => void;
    document.getElementById("date-filter")!.onchange = (e) => {
        filters.dateFilter = ((e.target as HTMLSelectElement)?.value as any) || undefined;
        resolve?.(filters);
    };
    document.getElementById("name-filter")!.oninput = (e) => {
        filters.nameFilter = (e.target as HTMLInputElement)?.value.toLowerCase().trim() || undefined;
        resolve?.(filters);
    };
    document.getElementById("organizer-filter")!.onchange = (e) => {
        const select = e.target as HTMLSelectElement;
        const selectedOrganizers = Array.from(select.selectedOptions).map(option => option.value);
        filters.organizerFilter = selectedOrganizers.length > 0 ? selectedOrganizers : undefined;
        resolve?.(filters);
    };
    yield filters;
    for (; ;)
        yield new Promise<OrienteeringEventFilterSettings>(_resolve => resolve = _resolve)
            .then((filters) => {
                saveFilterSettings(filters);
                return filters;
            });
}

async function loadData() {
    const contentDiv = document.getElementById("content")!;
    try {
        const response = await fetch(DATA_URL);
        if (!response.ok) throw new Error("Failed to fetch data");
        const data = await response.json();

        populateFilters(data);
        restoreFilterUI();
        setupMultiSelectToggle();

        for await (const filters of filterSettings()) {
            renderData(data, filters);
        }
    } catch (error) {
        console.error("Error loading data:", error);
        contentDiv.innerText = "Failed to load data.";
    }
}

function setupMultiSelectToggle() {
    const organizerPlaceholder = document.getElementById("organizer-placeholder") as HTMLSelectElement;
    const organizerFilterContainer = document.getElementById("organizer-filter-container") as HTMLDivElement;
    const organizerFilter = document.getElementById("organizer-filter") as HTMLSelectElement;

    function showFilterPopup() {
        const rect = organizerPlaceholder.getBoundingClientRect();
        console.log(rect);
        organizerFilterContainer.style.display = "block";
        organizerFilterContainer.style.position = "fixed";
        organizerFilterContainer.style.top = `${rect.bottom + window.scrollY}px`;
        organizerFilterContainer.style.right = `${window.innerWidth-rect.right + window.scrollX}px`;
    }

    function adjustDropdownBehavior() {
        if (window.innerWidth >= 768) {
            organizerPlaceholder.style.display = "inline-block";
            organizerFilterContainer.style.display = "none";
            organizerFilter.setAttribute('size', '20');

            organizerPlaceholder.addEventListener("mousedown", (event) => {
                event.preventDefault();
                showFilterPopup();
            });
        } else {
            organizerPlaceholder.style.display = "none";
            organizerFilterContainer.style.display = "block";
            organizerFilterContainer.style.position = "static";
            organizerFilter.setAttribute('size', '1');
        }
    }

    adjustDropdownBehavior();
    window.addEventListener("resize", adjustDropdownBehavior);

    document.addEventListener("click", (event) => {
        if (!organizerFilterContainer.contains(event.target as Node) && event.target !== organizerPlaceholder) {
            adjustDropdownBehavior();
        }
    });
}



function populateFilters(events: { event: OrienteeringEvent }[]) {
    const organizers = new Set(events.map(({ event }) => event.organizerName));

    const dateFilter = document.getElementById("date-filter")!;
    [
        ['past', 'menneet'],
        ['future', 'tulevat'],
    ].forEach(([value, textContent]) => {
        const option = document.createElement("option");
        option.value = value;
        option.textContent = textContent;
        dateFilter.appendChild(option);
    });

    const organizerFilter = document.getElementById("organizer-filter")!;
    organizers.forEach(org => {
        const option = document.createElement("option");
        option.value = org;
        option.textContent = org;
        organizerFilter.appendChild(option);
    });
}

function formatDate(date: Date) {
    return `${date.toLocaleDateString('fi-FI', { weekday: 'short' })}\u00A0${date.getDate()}.${date.getMonth() + 1}. klo\u00A0${date.getHours()}.${String(date.getMinutes()).padStart(2, '0')}`;
}

function wgs84ToTm35fin(lat: number, lon: number): { northing: number; easting: number } {
    const a = 6378137.0; // Semi-major axis (WGS84)
    const f = 1 / 298.257222101; // Flattening (WGS84)
    const k0 = 0.9996; // Scale factor for TM35FIN
    const lon0 = 27; // Central meridian for EPSG:3067
    const falseEasting = 500000; // UTM false easting
    const falseNorthing = 0; // TM35FIN has no false northing for the northern hemisphere

    const e = Math.sqrt(2 * f - f * f); // First eccentricity
    const toRad = (deg: number) => deg * Math.PI / 180;
    const toDeg = (rad: number) => rad * 180 / Math.PI;

    const phi = toRad(lat);
    const lambda = toRad(lon);
    const lambda0 = toRad(lon0);

    // Compute N, T, C, A, M for projection
    const N = a / Math.sqrt(1 - e * e * Math.sin(phi) * Math.sin(phi));
    const T = Math.tan(phi) * Math.tan(phi);
    const C = (e * e) / (1 - e * e) * Math.cos(phi) * Math.cos(phi);
    const A = Math.cos(phi) * (lambda - lambda0);

    // Meridional arc
    const M = a * (
        (1 - e * e / 4 - 3 * e ** 4 / 64 - 5 * e ** 6 / 256) * phi
        - (3 * e ** 2 / 8 + 3 * e ** 4 / 32 + 45 * e ** 6 / 1024) * Math.sin(2 * phi)
        + (15 * e ** 4 / 256 + 45 * e ** 6 / 1024) * Math.sin(4 * phi)
        - (35 * e ** 6 / 3072) * Math.sin(6 * phi)
    );

    // Compute Easting (x)
    const easting = falseEasting + k0 * N * (
        A + (1 - T + C) * Math.pow(A, 3) / 6
        + (5 - 18 * T + T * T + 72 * C - 58 * (e * e) / (1 - e * e)) * Math.pow(A, 5) / 120
    );

    // Compute Northing (y)
    const northing = falseNorthing + k0 * (
        M + N * Math.tan(phi) * (
            (A * A) / 2 + (5 - T + 9 * C + 4 * C * C) * Math.pow(A, 4) / 24
            + (61 - 58 * T + T * T + 600 * C - 330 * (e * e) / (1 - e * e)) * Math.pow(A, 6) / 720
        )
    );

    return { northing, easting };
}

function renderData(events: { event: OrienteeringEvent }[], filters: OrienteeringEventFilterSettings) {
    const tbody = document.querySelector(".event-table tbody")!;

    // Clear existing rows
    while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
    }

    const currentYear = new Date().getFullYear();
    const currentYearStart = new Date(currentYear, 0).getTime();
    const nextYearStart = new Date(currentYear + 1, 0).getTime();

    let previousStartDateTime: number | undefined;

    events.filter(({ event }) => {
        return (
            event.startDateTime >= currentYearStart &&
            event.endDateTime <= nextYearStart &&
            (!filters.dateFilter
                || (filters.dateFilter === 'past' && event.startDateTime < Date.now())
                || (filters.dateFilter === 'future' && event.startDateTime > Date.now() - 24 * 60 * 60 * 1000)
            ) &&
            (!filters.nameFilter || event.name.toLowerCase().includes(filters.nameFilter)) &&
            (!filters.organizerFilter || filters.organizerFilter.includes(event.organizerName))
        );
    }).forEach(({ event }) => {
        const dayOfWeek = new Date(event.startDateTime)
            .toLocaleDateString('en-US', { weekday: 'long' })
            .toLowerCase();

        const row = document.createElement("tr");
        row.classList.add("event-row");
        row.classList.add(dayOfWeek); // Assign CSS class based on the day of the week

        const dateCell = document.createElement("td");
        dateCell.classList.add("date");
        if (previousStartDateTime !== event.startDateTime) {
            dateCell.textContent = formatDate(new Date(event.startDateTime));
        }

        const eventCell = document.createElement("td");
        eventCell.classList.add("event");
        eventCell.textContent = event.name.replace(/\s/g, ' ');

        const organizerCell = document.createElement("td");
        organizerCell.classList.add("organizer");
        organizerCell.textContent = event.organizerName;

        row.appendChild(dateCell);
        row.appendChild(eventCell);
        row.appendChild(organizerCell);

        tbody.appendChild(row);

        // Create an expandable row but keep it hidden initially
        const expandedRow = document.createElement("tr");
        expandedRow.classList.add("expanded-row");
        expandedRow.style.display = "none"; // Initially hidden

        const expandedCell = document.createElement("td");
        expandedCell.colSpan = 3; // Spanning all columns

        // Additional information content
        const expandedContent = document.createElement("div");
        expandedContent.classList.add("expanded-content");

        if (event.locationDescription || event.locationCoordinates) {
            const locationInfo = document.createElement("div");
            const locationTitle = document.createElement("div");
            locationTitle.textContent = `Opastuksen alku, lähtöpaikan osoite tai muu sijainti: `;
            const locationDescription = document.createElement("div");
            locationDescription.classList.add('location-description');
            locationDescription.textContent = event.locationDescription;
            locationInfo.appendChild(locationTitle);
            locationInfo.appendChild(locationDescription);
            if (event.locationCoordinates) {
                const { northing, easting } = wgs84ToTm35fin(event.locationCoordinates.lat, event.locationCoordinates.lon);
                const mapLink = document.createElement("a");
                mapLink.href = `https://asiointi.maanmittauslaitos.fi/karttapaikka/?lang=fi&share=customMarker&n=${northing.toFixed(2)}&e=${easting.toFixed(2)}&title=${encodeURIComponent(event.name)}&zoom=6&layers=W3siaWQiOjIsIm9wYWNpdHkiOjEwMH1d-z`;
                mapLink.target = "_blank";
                mapLink.textContent = "🌍\u00A0Näytä\u00A0kartalla";
                mapLink.classList.add("button");
                locationDescription.appendChild(mapLink);
            }
            expandedContent.appendChild(locationInfo);
        }

        const timeInfo = document.createElement("div");
        const startTime = new Date(event.startDateTime);
        const endTime = new Date(event.endDateTime);
        timeInfo.textContent = `Tapahtuma jatkuu ${formatDate(endTime)} saakka.`;
        expandedContent.appendChild(timeInfo);

        const eventPageLinkInfo = document.createElement("div");
        eventPageLinkInfo.classList.add('event-page-link');
        eventPageLinkInfo.appendChild(Object.assign(document.createElement('a'), {
            href: `https://www.rastilippu.fi/kuntorastit/tapahtuma/${event.uuid}`,
            target: '_blank',
            textContent: '📌 Tapahtumanjärjestäjän ilmoitus',
        }));
        expandedContent.appendChild(eventPageLinkInfo);

        expandedCell.appendChild(expandedContent);
        expandedRow.appendChild(expandedCell);
        tbody.appendChild(expandedRow);

        // Toggle expansion on row click
        row.addEventListener("click", () => {
            if (expandedRow.style.display === "none") {
                // Close any other open row first
                document.querySelectorAll(".expanded-row").forEach(el => (el as HTMLElement).style.display = "none");
                expandedRow.style.display = "table-row";
            } else {
                expandedRow.style.display = "none";
            }
        });

        previousStartDateTime = event.startDateTime;
    });
}

document.addEventListener("DOMContentLoaded", loadData);

-----

===== src/service-worker.mts =====

/// <reference lib="webworker" />
export type { };
declare const self: ServiceWorkerGlobalScope;

const CACHE_NAME = "kuntorastit";
const URLS_TO_CACHE = [
    "index.html",
    "dist/kuntorastit.mjs",
    "data/events.json",
    "icon-192.png",
];

self.addEventListener("install", (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME).then((cache) => cache.addAll(URLS_TO_CACHE))
    );
});

self.addEventListener("fetch", (event) => {
    event.respondWith((async () => {
        try {
            const response = await fetch(event.request);
            const responseClone = response.clone();
            caches.open(CACHE_NAME).then(
                (cache) => {
                    cache.put(event.request, responseClone);
                });
            return response;
        } catch (e) {
            // If network fails, try to return a cached response
            return await caches.match(event.request)
                ?? new Response('Offline content unavailable', {
                    status: 503,
                    statusText: 'Service Unavailable',
                    headers: { 'Content-Type': 'text/plain' }
                });
        }
    })());
});
-----

===== public/manifest.json =====

{
    "name": "Kuntorastit",
    "short_name": "Kuntorastit",
    "start_url": "/kuntorastit",
    "display": "standalone",
    "background_color": "#ffffff",
    "theme_color": "#f86135",
    "icons": [
      {
        "src": "icon-192.png",
        "sizes": "192x192",
        "type": "image/png"
      }
    ]
  }
-----

===== public/index.html =====

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kuntorastit</title>
    <link rel="manifest" href="manifest.json">
    <link rel="icon" type="image/png" href="icon-192.png">
    <script type="module" src="dist/kuntorastit.mjs"></script>
    <style>
        :root {
            --primary-color: #b9c6d2;
            --secondary-color: #d0dde9;
            --tertiary-color: #edf0f8;
        }

        body {
            background: linear-gradient(180deg, var(--primary-color) 0%, var(--secondary-color) 10.45%, var(--tertiary-color) 41.35%);

            font-family: Arial, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;

            min-height: 100dvh;
            display: flex;
            flex-direction: row;
            justify-content: center;
            width: 100%;
            max-width: 1024px;
            margin: 0 auto;
            box-sizing: border-box;
        }

        select {
            width: 100%;
            /* Make the select box take up full width of td */
            max-width: 100%;
            /* Prevents it from overflowing */
            box-sizing: border-box;
            /* Ensures padding and border are included in width */
        }

        table {
            padding: 1rem;
            width: 100%;
            max-width: 30rem;
            margin: auto;
            table-layout: fixed;
            /* Ensures columns adhere to defined widths */
        }

        th,
        td {
            padding: .1rem;
            position: relative;
        }

        td {
            color: #180f3d;
            mix-blend-mode: multiply;
        }

        th.date,
        td.date {
            width: 4rem;
        }

        th.organizer,
        td.organizer {
            width: 5rem;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        th.event,
        td.event {
            width: auto;
            max-width: calc(100% - 9rem);
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        th.event input {
            width: 100%;
            box-sizing: border-box;
        }

        .event-row {
            cursor: pointer;
        }

        .expanded-row {
            background-color: #f8f9fa;
        }

        .expanded-content {
            padding: 10px;
        }

        .location-description {
            justify-content: space-around;
        }

        .location-description,
        .event-page-link {
            display: flex;
            flex-direction: row;
            align-items: center;
            padding: .5rem;
        }

        .button {
            display: inline-block;
            margin-top: 5px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 4px;
        }

        .button:hover {
            background-color: #0056b3;
        }

        .monday {
            background-color: #f0f921c0;
        }

        .tuesday {
            background-color: #cc4778c0;
            ;
        }

        .wednesday {
            background-color: #0d088780;
        }

        .thursday {
            background-color: #fdb42fc0;
        }

        .friday {
            background-color: #9c179e80;
        }

        .saturday {
            background-color: #ed7953c0;
        }

        .sunday {
            background-color: #5c01a680;
        }
    </style>
</head>

<body>
    <div id="content">
        <table class="event-table">
            <thead>
                <tr>
                    <th class="date">
                        <select id="date-filter">
                            <option value="">aika</option>
                        </select>
                    </th>
                    <th class="event">
                        <input type="text" id="name-filter" placeholder="tapahtuma">
                    </th>
                    <th class="organizer">
                        <select id="organizer-placeholder">
                            <option value="">seura</option>
                        </select>
                        <div id="organizer-filter-container"
                            style="display: none; position: absolute; background: white; padding: 0px; z-index: 1000;">
                            <select id="organizer-filter" multiple size="6">
                            </select>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</body>

</html>
-----

